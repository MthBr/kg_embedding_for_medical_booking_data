dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
#dev.copy(tiff,paste(image_path, "tiff/heatmap_", ex_name, ".tiff", sep = ""), width = 800, height = 600, res=90)
#dev.off()
image_save_directory <-paste(image_path, "A/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
imghmp <- heatmap(data,symm=TRUE,col=new.palette(20))
print(imghmp)
image_save_directory <-paste(image_path, "B/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "B/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
}
end_time <- Sys.time()#end count time
print(paste("Time  generating image heatmap comparison - final parts",lubridate::as.period(round(difftime(end_time, start_time)))))#how much
img <- levelplot(data, xlab="", ylab="", main=ex_name, scales=list(x=list(rot=90)),
col.regions = terrain.colors(100)[length(heat.colors(100)):1], panel = myPanel, aspect="fill")
print(img)
imghmp <- heatmap(data,symm=TRUE,col=palette(20))
imghmp <- heatmap(data,symm=TRUE)#,col=new.palette(20)
print(imghmp)
imghmp <- heatmap(data,symm=TRUE)#,col=new.palette(20)
imghmp <- heatmap(data,symm=TRUE)#,col=new.palette(20)
dev.off()
imghmp <- heatmap(data,symm=TRUE)#,col=new.palette(20)
library("lattice")
start_time <- Sys.time()#count time
myPanel <- function(x, y, z, ...) {
panel.levelplot(x,y,z,...)
panel.text(x, y, round(z,2),cex=.9)
}
print(external_index_tensor)
for (ex_name in c("czekanowski_dice")){  # c("czekanowski_dice")external_criteria_names
data <- external_index_tensor[[ex_name]]
img <- levelplot(data, xlab="", ylab="", main=ex_name, scales=list(x=list(rot=90)),
col.regions = terrain.colors(100)[length(heat.colors(100)):1], panel = myPanel, aspect="fill")
print(img)
#plotpath<- file.path(image_path, "PLOT_name",paste("heatmap_",ex_name,".png",sep=""))
image_save_directory <-paste(image_path, "A/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
#dev.copy(tiff,paste(image_path, "tiff/heatmap_", ex_name, ".tiff", sep = ""), width = 800, height = 600, res=90)
#dev.off()
image_save_directory <-paste(image_path, "A/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
imghmp <- heatmap(data,symm=TRUE)#,col=new.palette(20)
# print(imghmp)
image_save_directory <-paste(image_path, "B/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "B/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
}
end_time <- Sys.time()#end count time
print(paste("Time  generating image heatmap comparison - final parts",lubridate::as.period(round(difftime(end_time, start_time)))))#how much
# png(filename="ciao.png")
# print(levelplot(data, xlab="", ylab="", main=ex_name, scales=list(x=list(rot=90)),
#           col.regions = terrain.colors(100)[length(heat.colors(100)):1], panel = myPanel, aspect="fill"))
# dev.off()
# imghmp <-
heatmap(data,symm=TRUE)#,col=new.palette(20)
dev.off()
m
# imghmp <-
heatmap(data,symm=TRUE)#,col=new.palette(20)
dev.off()
library("lattice")
start_time <- Sys.time()#count time
myPanel <- function(x, y, z, ...) {
panel.levelplot(x,y,z,...)
panel.text(x, y, round(z,2),cex=.9)
}
print(external_index_tensor)
for (ex_name in c("czekanowski_dice")){  # c("czekanowski_dice")external_criteria_names
data <- external_index_tensor[[ex_name]]
img <- levelplot(data, xlab="", ylab="", main=ex_name, scales=list(x=list(rot=90)),
col.regions = terrain.colors(100)[length(heat.colors(100)):1], panel = myPanel, aspect="fill")
print(img)
#plotpath<- file.path(image_path, "PLOT_name",paste("heatmap_",ex_name,".png",sep=""))
image_save_directory <-paste(image_path, "A/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
#dev.copy(tiff,paste(image_path, "tiff/heatmap_", ex_name, ".tiff", sep = ""), width = 800, height = 600, res=90)
#dev.off()
image_save_directory <-paste(image_path, "A/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
# imghmp <-
heatmap(data,symm=TRUE)#,col=new.palette(20)
# print(imghmp)
image_save_directory <-paste(image_path, "B/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "B/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
}
end_time <- Sys.time()#end count time
print(paste("Time  generating image heatmap comparison - final parts",lubridate::as.period(round(difftime(end_time, start_time)))))#how much
source('/media/NAS/Rcodes/03_compare_clusters_TODO.R')
print(img)
dev.off()
# imghmp <-
heatmap(data,symm=TRUE)#,col=new.palette(20)
dev.off()
ex_name <- c("czekanowski_dice")
data <- external_index_tensor[[ex_name]]
img <- levelplot(data, xlab="", ylab="", main=ex_name, scales=list(x=list(rot=90)),
col.regions = terrain.colors(100)[length(heat.colors(100)):1], panel = myPanel, aspect="fill")
print(img)
image_save_directory <-paste(image_path, "no_dend_yes_fill/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "no_dend_yes_fill/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
# imghmp <-
heatmap(data,symm=TRUE)#,col=new.palette(20)
# print(imghmp)
image_save_directory <-paste(image_path, "yes_dend_no_fill/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "yes_dend_no_fill/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
print(external_index_tensor)
library("lattice")
start_time <- Sys.time()#count time
myPanel <- function(x, y, z, ...) {
panel.levelplot(x,y,z,...)
panel.text(x, y, round(z,2),cex=.9)
}
for (ex_name in c("czekanowski_dice")){  # c("czekanowski_dice")external_criteria_names
data <- external_index_tensor[[ex_name]]
img <- levelplot(data, xlab="", ylab="", main=ex_name, scales=list(x=list(rot=90)),
col.regions = terrain.colors(100)[length(heat.colors(100)):1], panel = myPanel, aspect="fill")
print(img)
#plotpath<- file.path(image_path, "PLOT_name",paste("heatmap_",ex_name,".png",sep=""))
image_save_directory <-paste(image_path, "no_dend_yes_fill/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
#dev.copy(tiff,paste(image_path, "tiff/heatmap_", ex_name, ".tiff", sep = ""), width = 800, height = 600, res=90)
#dev.off()
image_save_directory <-paste(image_path, "no_dend_yes_fill/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
# imghmp <-
heatmap(data,symm=TRUE)#,col=new.palette(20)
# print(imghmp)
image_save_directory <-paste(image_path, "yes_dend_no_fill/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "yes_dend_no_fill/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
}
end_time <- Sys.time()#end count time
print(paste("Time  generating image heatmap comparison - final parts",lubridate::as.period(round(difftime(end_time, start_time)))))#how much
dev.off()
# imghmp <-
heatmap(data,symm=TRUE,panel = myPanel, aspect="fill")#,col=new.palette(20)
# imghmp <-
heatmap(data,symm=TRUE,aspect="fill")#,col=new.palette(20)
# imghmp <-
heatmap.2(data,symm=TRUE)#,col=new.palette(20)
# imghmp <-
gplots::heatmap.2(data,symm=TRUE)#,col=new.palette(20)
dev.off()
# imghmp <-
gplots::heatmap.2(data,symm=TRUE)#,col=new.palette(20)
par(mar=c(5,6,4,1)+.1)
# imghmp <-
gplots::heatmap.2(data,symm=TRUE)#,col=new.palette(20)
par(mar=c(5,6,4,1)+.1)
# imghmp <-
gplots::heatmap.2(data,symm=TRUE)#,col=new.palette(20)
par(mar=c(10,4,4,1)+.1)
# imghmp <-
gplots::heatmap.2(data,symm=TRUE)#,col=new.palette(20)
par(mar=c(10,4,4,1)+.1)
# imghmp <-
heatmap(data,symm=TRUE)#,col=new.palette(20)
par(mar=c(100, 4.1, 4.1, 100)) #prevent cutting off labels
for (ex_name in c("czekanowski_dice")){  # c("czekanowski_dice")external_criteria_names
data <- external_index_tensor[[ex_name]]
img <- levelplot(data, xlab="", ylab="", main=ex_name, scales=list(x=list(rot=90)),
col.regions = terrain.colors(100)[length(heat.colors(100)):1], panel = myPanel, aspect="fill")
print(img)
#plotpath<- file.path(image_path, "PLOT_name",paste("heatmap_",ex_name,".png",sep=""))
image_save_directory <-paste(image_path, "no_dend_yes_fill/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
#dev.copy(tiff,paste(image_path, "tiff/heatmap_", ex_name, ".tiff", sep = ""), width = 800, height = 600, res=90)
#dev.off()
image_save_directory <-paste(image_path, "no_dend_yes_fill/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
# imghmp <-
heatmap(data,symm=TRUE)#,col=new.palette(20)
# print(imghmp)
image_save_directory <-paste(image_path, "yes_dend_no_fill/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "yes_dend_no_fill/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
gplots::heatmap.2(data,symm=TRUE)
image_save_directory <-paste(image_path, "yes_dend_no_fill_other_function/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "yes_dend_no_fill_other_function/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
}
par(mar=c(20, 4.1, 4.1, 20)) #prevent cutting off labels
for (ex_name in c("czekanowski_dice")){  # c("czekanowski_dice")external_criteria_names
data <- external_index_tensor[[ex_name]]
img <- levelplot(data, xlab="", ylab="", main=ex_name, scales=list(x=list(rot=90)),
col.regions = terrain.colors(100)[length(heat.colors(100)):1], panel = myPanel, aspect="fill")
print(img)
#plotpath<- file.path(image_path, "PLOT_name",paste("heatmap_",ex_name,".png",sep=""))
image_save_directory <-paste(image_path, "no_dend_yes_fill/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
#dev.copy(tiff,paste(image_path, "tiff/heatmap_", ex_name, ".tiff", sep = ""), width = 800, height = 600, res=90)
#dev.off()
image_save_directory <-paste(image_path, "no_dend_yes_fill/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
# imghmp <-
heatmap(data,symm=TRUE)#,col=new.palette(20)
# print(imghmp)
image_save_directory <-paste(image_path, "yes_dend_no_fill/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "yes_dend_no_fill/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
gplots::heatmap.2(data,symm=TRUE)
image_save_directory <-paste(image_path, "yes_dend_no_fill_other_function/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "yes_dend_no_fill_other_function/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
}
gplots::heatmap.2(data,symm=TRUE,margins = c(15, 15))
gplots::heatmap.2(data,symm=TRUE,margins = c(20, 20))
gplots::heatmap.2(data,symm=TRUE,margins = c(25, 25))
gplots::heatmap.2(data,symm=TRUE,margins = c(21, 21))
gplots::heatmap.2(data,symm=TRUE,margins = c(21, 21))
gplots::heatmap.2(data,symm=TRUE,margins = c(20, 20))
dev.off()
gplots::heatmap.2(data,symm=TRUE,margins = c(21, 21))
dev.off()
gplots::heatmap.2(data,symm=TRUE,margins = c(20, 20))
par(mar=c(20, 20, 4.1, 20)) #prevent cutting off labels
for (ex_name in c("czekanowski_dice")){  # c("czekanowski_dice")external_criteria_names
data <- external_index_tensor[[ex_name]]
img <- levelplot(data, xlab="", ylab="", main=ex_name, scales=list(x=list(rot=90)),
col.regions = terrain.colors(100)[length(heat.colors(100)):1], panel = myPanel, aspect="fill")
print(img)
#plotpath<- file.path(image_path, "PLOT_name",paste("heatmap_",ex_name,".png",sep=""))
image_save_directory <-paste(image_path, "no_dend_yes_fill/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
#dev.copy(tiff,paste(image_path, "tiff/heatmap_", ex_name, ".tiff", sep = ""), width = 800, height = 600, res=90)
#dev.off()
image_save_directory <-paste(image_path, "no_dend_yes_fill/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
# imghmp <-
heatmap(data,symm=TRUE,margins = c(20, 20))#,col=new.palette(20)
# print(imghmp)
image_save_directory <-paste(image_path, "yes_dend_no_fill/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "yes_dend_no_fill/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
gplots::heatmap.2(data,symm=TRUE,margins = c(20, 20))
image_save_directory <-paste(image_path, "yes_dend_no_fill_other_function/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "yes_dend_no_fill_other_function/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
}
dev.off()
par(mar=c(20, 20, 4.1, 20)) #prevent cutting off labels
for (ex_name in c("czekanowski_dice")){  # c("czekanowski_dice")external_criteria_names
data <- external_index_tensor[[ex_name]]
img <- levelplot(data, xlab="", ylab="", main=ex_name, scales=list(x=list(rot=90)),
col.regions = terrain.colors(100)[length(heat.colors(100)):1], panel = myPanel, aspect="fill")
print(img)
#plotpath<- file.path(image_path, "PLOT_name",paste("heatmap_",ex_name,".png",sep=""))
image_save_directory <-paste(image_path, "no_dend_yes_fill/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
#dev.copy(tiff,paste(image_path, "tiff/heatmap_", ex_name, ".tiff", sep = ""), width = 800, height = 600, res=90)
#dev.off()
image_save_directory <-paste(image_path, "no_dend_yes_fill/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
# imghmp <-
heatmap(data,symm=TRUE,margins = c(20, 20))#,col=new.palette(20)
# print(imghmp)
image_save_directory <-paste(image_path, "yes_dend_no_fill/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "yes_dend_no_fill/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
gplots::heatmap.2(data,symm=TRUE,margins = c(20, 20))
image_save_directory <-paste(image_path, "yes_dend_no_fill_other_function/png" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".png",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(png,image_save_as, width = 800, height = 600, res=90)
dev.off()
image_save_directory <-paste(image_path, "yes_dend_no_fill_other_function/svg" ,sep = "/")
image_save_as <- paste(image_save_directory,"/" ,  "/heatmap_dend_", ex_name, ".svg",  sep = "")
dir.create(image_save_directory,recursive = TRUE)
dev.copy(svg,image_save_as)
dev.off()
}
end_time <- Sys.time()#end count time
print(paste("Time  generating image heatmap comparison - final parts",lubridate::as.period(round(difftime(end_time, start_time)))))#how much
dev.off()
gplots::heatmap.2(data,symm=TRUE,margins = c(10, 10))
dev.off()
# imghmp <-
heatmap(data,symm=TRUE,margins = c(10, 10))#,col=new.palette(20)
source('/media/NAS/Rcodes/03_compare_clusters_TODO.R')
dev.off()
source('/media/NAS/Rcodes/03_compare_clusters_TODO.R')
source('/media/NAS/Rcodes/03_compare_clusters_TODO.R')
21*21
lubridate::as.period(as.difftime(693*693*6/441, units = "secs"))
source('~/.active-rstudio-document')
View(external_index_tensor)
source('~/.active-rstudio-document')
source('/media/NAS/Rcodes/03_compare_clusters_TODO.R')
View(data_f_clusters)
#
data_f_clusters_all <- data_f_clusters
library(tidyverse)
data_f_clusters <- data_f_clusters_all %>% filter(K == 7 | K == 10, clusType!="fastkmed")
View(data_f_clusters)
a <- c("a_b_prova_c")
b <- unlist(strsplit(a, "[_]"))
b
a <- c("a_b_prova_c")
a
b
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("starting_script.R")
start_time <- Sys.time()#count time
#############################################################################
### Load data
#############################################################################
source("CUP_00_load_data.R")
images_path <- paste(images_path, PROJECT_NAME, sep = "/")
csv_path <- paste(csv_path, PROJECT_NAME, sep = "/")
rds_path <- paste(rds_path, PROJECT_NAME, sep = "/")
#########################################################
### C)  Create directories
#########################################################
dir.create(images_path,recursive = TRUE)
dir.create(csv_path,recursive = TRUE)
dir.create(rds_path,recursive = TRUE)
#############################################################################
### Add libraries
#############################################################################
library(lubridate)  # for nice time
library(tidyverse)  # data manipulation
library(cluster)    # clustering algorithms
library(factoextra) # clustering visualization
library(dendextend) # for comparing two dendrograms
library(ggrepel)    # for overlapping text
library(RColorBrewer) # for colours
#############################################################################
### Parameters to fix
#############################################################################
K <- 13
selected_K <- 8
#Sub fast testing part:
set.seed(0)
# nSample <- 100 #number of sample # only for small subtests
# df_MANN_full <- df_MANN
# df_MANN <- df_MANN[sample(nrow(df_MANN), nSample), ]
#############################################################################
### B2) Parallel settings
#############################################################################
# numCores <- detectCores()
#
# For Windows
# cluster <- makeCluster(3)
# For Linux
# cluster <- 8
#
# registerDoParallel(cluster)
#############################################################################
# Hierarchical Clustering Phase 1
#############################################################################
start_time_local <- Sys.time()#count time
# Dissimilarity matrix
d <- dist(df_real_valued[1:DIM], method = "euclidean")
# Hierarchical clustering using Ward Linkage
hc <- hclust(d, method = "ward.D2")
# Plot the obtained dendrogram
plot(hc, cex = 0.6, hang = -1)
# Cut tree into 4 groups
sub_grp <- cutree(hc, k = K)
# Number of members in each cluster
table(sub_grp)
# add clusters labels
df_real_valued %>%
mutate(cluster = sub_grp) %>%
head
#Create a custom color scale
myColors <- brewer.pal(length(table(df_real_valued["entity"])), "Set2")
names(myColors) <- levels(as.factor(df_real_valued$entity))
fillScale <- scale_fill_manual(name = "entity",values = myColors)
myColors
